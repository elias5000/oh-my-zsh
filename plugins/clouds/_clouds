#compdef clouds
#autoload

# clouds zsh completion

_clouds_all_stacks() {
  all_stacks=($(clouds list | tail -n +2 | awk '{print $1}'))
}

_clouds_remote_stacks() {
  remote_stacks=($(clouds list -r | tail -n +2 | awk '{print $1}'))
}

_clouds_local_stacks() {
  local_stacks=(`test -d stacks && ls -1 stacks`)
}

local -a _1st_arguments
_1st_arguments=(
  'clone:clone a stack in the current directory'
  'delete:delete a stack in AWS'
  'describe:output parameters, outputs, and resources of a stack in AWS'
  'dump:dump a stack in AWS to current directory'
  'events:output all events of a stack'
  'format:normalize stack template(s) (for better diffs)'
  'list:list available stacks'
  'update:update stack in AWS'
)

local expl
local -a all_stacks local_stacks

_arguments \
  '(-h)--help[show this help message and exit]' \
  '(-d)--dry[dry-run: only state what would be done]' \
  '(-f)--force[force action]' \
  '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "clouds subcommand" _1st_arguments
  return
fi

case "$words[1]" in
  clone)
    _clouds_local_stacks
    _wanted local_stacks expl 'local stacks' compadd -a local_stacks
  ;;
  delete)
    _arguments \
      '(-h)--help[show this help message and exit]' \
      '(-e)--events[display events while waiting for the deletion to complete (implies --wait)]' \
      '(-w)--wait[wait for deletion to finish (synchronous mode)]'
    _clouds_remote_stacks
    _wanted remote_stacks expl 'remote stacks' compadd -a remote_stacks
  ;;
  describe)
    _arguments \
      '(-h)--help[show this help message and exit]' \
      '(-j)--json[output as JSON]'
    _clouds_remote_stacks
    _wanted remote_stacks expl 'remote stacks' compadd -a remote_stacks
  ;;
  dump)
    _arguments \
      '(-h)--help[show this help message and exit]' \
      '(-a)--all[dump all stacks]'
    _clouds_remote_stacks
    _wanted remote_stacks expl 'remote stacks' compadd -a remote_stacks
  ;;
  events)
    _arguments \
      '(-h)--help[show this help message and exit]'
    _clouds_remote_stacks
    _wanted remote_stacks expl 'remote stacks' compadd -a remote_stacks
  ;;
  format)
    _arguments \
      '(-h)--help[show this help message and exit]' \
      '(-a)--all[reformat all stacks]' \
      '(-p)--pipe[pipe mode - read template from stdin and output to stdout]'
    _clouds_local_stacks
    _wanted local_stacks expl 'local stacks' compadd -a local_stacks
  ;;
  list)
    _arguments \
      '(-h)--help[show this help message and exit]' \
      '(-l)--local[list only local stacks]' \
      '(-r)--remote[list only stacks in AWS]'
  ;;
  update)
    _arguments \
      '(-h)--help[show this help message and exit]' \
      '(-c)--create_missing[create stack in AWS if it does not exist]' \
      '(-e)--events[display events while waiting for the update to complete (implies --wait)]' \
      '(-w)--wait[wait for update to finish (synchronous mode)]'
    _clouds_local_stacks
    _wanted local_stacks expl 'local stacks' compadd -a local_stacks
  ;;
esac
