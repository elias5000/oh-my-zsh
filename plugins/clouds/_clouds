#compdef clouds
#autoload

# clouds zsh completion

_clouds_all_stacks() {
  all_stacks=($(clouds list | tail -n +2 | awk '{print $1}'))
}

_clouds_remote_stacks() {
  remote_stacks=($(clouds list -r | tail -n +2 | awk '{print $1}'))
}

_clouds_local_stacks() {
  local_stacks=(`test -d stacks && ls -1 stacks`)
}

local -a _1st_arguments
_1st_arguments=(
  'clone:clone a stack in the current directory'
  'delete:delete a stack in AWS'
  'describe:output parameters, outputs, and resources of a stack in AWS'
  'dump:dump a stack in AWS to current directory'
  'events:output all events of a stack'
  'format:normalize stack template(s) (for better diffs)'
  'list:list available stacks'
  'update:update stack in AWS'
)

local expl
local -a all_stacks local_stacks

_arguments \
  '(-h)--help[show this help message and exit]' \
  '(-d)--dry[dry-run: only state what would be done]' \
  '(-f)--force[force action]' \
  '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "clouds subcommand" _1st_arguments
  return
fi

case "$words[1]" in
  clone|edit)
    _clouds_local_stacks
    _wanted local_stacks expl 'local stacks' compadd -a local_stacks
  ;;
  update)
    _arguments '(-c)--create_missing[Create AWS stacks if the required sources exist locally]'
    _clouds_local_stacks
    _wanted local_stacks expl 'local stacks' compadd -a local_stacks
  ;;
  dump)
    _arguments '(--all)--all[dump all stacks]'
    _clouds_all_stacks
    _wanted all_stacks expl 'all stacks' compadd -a all_stacks
  ;;
  delete)
    _clouds_all_stacks
    _wanted all_stacks expl 'all stacks' compadd -a all_stacks
  ;;
esac
